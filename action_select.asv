function action_best = action_select(state, goal, params, observed_map, real_map)
% Want to select action based on heading of state and location of desired
% target
% denom = desired_target.x - state.x;
%     if denom == 0
%         denom = 0.01;
%     end
%     input_head = (desired_target.y - state.y) / denom;
%     desired_heading = atan(input_head);
% 
% 
%     if (desired_target.x < state.x)
%         desired_heading = desired_heading - pi;
%     end
% 
%     if (desired_heading >= 2 * pi)
%         desired_heading = desired_heading - 2 * pi;
%     end
% 
%     if (desired_heading < 0)
%         desired_heading = desired_heading + 2 * pi;
%     end
% 
% 	diff = desired_heading - state.theta;
% 	absDiff = abs(diff);
% 
%     if (absDiff <= pi)
%         if absDiff == pi
%            retValue = pi; 
%         else
%             retValue = diff;
%         end
%     elseif (desired_heading > state.theta)
%         retValue = ( absDiff - 2 * pi);
%     else
%         retValue = ( 2 * pi - absDiff);
%     end
% 
%     if (abs(retValue) < 0.001)
%         retValue = 0;
%     end
%     
%     if retValue <= -pi/2
%        action = -1;
%     elseif retValue >= pi/2
%         action = 1;
%     else
%         action = retValue/(pi/2);
%     end
    possible_actions = -1:0.05:1];
    dist_save = intmax;
    action_best = 0;
    for a_index = 1:1:length(possible_actions)
        action = possible_actions(a_index);
        for t = 1:number_of_timesteps_RRT
            % 
            [state, observed_map, flags] = motionModel(params, state, action, observed_map, real_map, goal);
            if flags == 2 || flags == 1
                break;
            end
        end 
        
        if dist(state, goal) < dist_save
           action_best = action;
        end
    end
    
%     action = action + (rand(1)*0.2) - 0.1;
    
%     if action < -1
%         action = -1;
%     elseif action > 1
%         action = 1;
%     end

end